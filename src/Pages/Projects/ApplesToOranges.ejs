<!DOCTYPE html>
<html>
  <head>
    <%- include(buildRoot + '/Partials/header.ejs', {relPth: "../../"}); -%>
    <title>Caleb W. - Cloth and Shallow Water Sim</title>
    <link href="../../Assets/CSS/projectPage.css" rel="stylesheet" />
  </head>
  <body class="d-flex flex-column">
    <header>
      <div class="contentBody d-flex flex-column"><%- include(buildRoot + '/Partials/nav.ejs', {navID: 0, logo: true,relPth: "../../"}); -%></div>
    </header>

    <main>
      <section class="projectHeaderImg bg-dark text-light">
        <video autoplay loop muted class="">
          <source src="../../Assets/Img/projectAssets/Videos/Video_6.webm" type="video/webm" />
        </video>
        <!-- Image Mask -->
        <div class="mask mask-custom"></div>

        <div class="headerContent row d-flex align-items-center w-100 h-100 px-5">
          <div class="col-sm-6">
            <h2>Group Pathfinding With Flow Fields</h2>
            <h6 class="ps-3 dim"><em>C#, Unity 3D, Pathfinding, Flow Field, Eikonal Equations, 3D Simulation</em></h6>
          </div>
          <div class="col-sm-6">
            <p>
              Group Pathfinding With Flow Fields is a project I wrote as the final project for my Animation and Planning In Games class. My goal was to implement a Flow Field based pathfinding
              solution for large numbers of individual agents in the game engine Unity, similar to systems found in RTS games. The Flow Field is built on a grid representation and the integration
              field is calculated with the Eikonal equation, providing a smoother vector field when compared to methods based on a form of Dijkstra’s algorithm. The result is a relatively efficient
              pathfinding solution that's computation time scales with the map size not the number of pathing agents.
            </p>
          </div>
        </div>
      </section>

      <section class="container" style="max-width: unset">
        <div class="row px-5 d-flex align-items-center">
          <div class="col-md-8">
            <div class="bg-image p-3">
              <img src="../../Assets/Img/projectAssets/FlowField Grid Arrows.PNG" class="cIMG" style="aspect-ratio: 16 / 9; max-height: 400px" />
            </div>
          </div>
          <div class="col-md-4 py-3">
            <div>
              <h4>Project Details</h4>
              <ul class="ps-3 list-unstyled">
                <li>
                  <strong>Category:</strong>
                  Game Development, Game Design, Graphics, 3D Simulation, Unity
                </li>
                <li><strong>Date:</strong> Fall 2023</li>
                <li>
                  <strong>Technologies:</strong>
                  C#, Unity 3D, Pathfinding, 3D Rendering
                </li>
              </ul>
            </div>
            <div class="pt-2">
              <h4>How to Run</h4>
              <ul class="ps-3 list-unstyled">
                <li>1.) Click on the Download the Project button</li>
                <li>2.) Download the latest executable from the Github Releases Page</li>
                <li>3.) Click the executable to play the game</li>
                <li>4.) Check out the project's source code on Github</li>
              </ul>
            </div>

            <div class="pt-2 float-end">
              <button class="btn btn-outline-dark mt-2">Download Project</button>
              <button class="btn btn-dark mt-2" style="background-color: #333333"><i class="fab fa-github"></i> Github</button>
            </div>
          </div>
        </div>
      </section>

      <section class="mt-4 additionalFeatures">
        <div class="contentBody fHeader shadow-5 mb-3">
          <h1 class="py-2">Highlighted Features</h1>
        </div>

        <div class="featureContainer">
          <div class="card g-0">
            <div class="row gx-0 d-flex align-items-center">
              <div class="col-md-5 d-flex">
                <video autoplay loop muted class="cIMG p-2 fcIMG">
                  <source src="../../Assets/Img/projectAssets/Videos/Video_4.webm" type="video/webm" />
                </video>
              </div>
              <div class="offset-md-1 col-md-6">
                <div class="card-body">
                  <h5 class="card-title snippet">Many Unit Single Goal Pathfinding</h5>
                  <p class="ps-2 card-text">
                    Because the flow field is a map calculated once for each destination, the computation time scales with the size of the map and not with the number of agents requesting a path. This
                    makes the algorithm well suited for many agents pathing from different locations to the same point.
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div class="card g-0">
            <div class="row gx-0 d-flex align-items-center">
              <div class="col-md-5 d-flex">
                <video autoplay loop muted class="cIMG p-2 fcIMG">
                  <source src="../../Assets/Img/projectAssets/Videos/Video_16.webm" type="video/webm" />
                </video>
              </div>
              <div class="offset-md-1 col-md-6">
                <div class="card-body">
                  <h5 class="card-title snippet">Flowing Movement</h5>
                  <p class="ps-2 card-text">
                    Because the Flow Field pathfinding has a unit reference the field and follow the graident of that field, paths often look more organic and large numbers of agents start to move
                    more akin to fluid around obstacles.
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div class="card g-0">
            <div class="row gx-0 d-flex align-items-center">
              <div class="col-md-5 d-flex">
                <video autoplay loop muted class="cIMG p-2 fcIMG">
                  <source src="../../Assets/Img/projectAssets/Videos/Video_12.webm" type="video/webm" />
                </video>
              </div>
              <div class="offset-md-1 col-md-6">
                <div class="card-body">
                  <h5 class="card-title snippet">Layers of Maps</h5>
                  <p class="ps-2 card-text">
                    The final vector field that agents reference when they want to move is calulated in from a series of field. We start with an obstruction layer, then create an integration layer by
                    integrating values out from the goal position. Taking the gradient of that integration field at each cell in the grid provides the vector field.
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div class="card g-0">
            <div class="row gx-0 d-flex align-items-center">
              <div class="col-md-5 d-flex">
                <video autoplay loop muted class="cIMG p-2 fcIMG">
                  <source src="../../Assets/Img/projectAssets/Videos/Video_20.webm" type="video/webm" />
                </video>
              </div>
              <div class="offset-md-1 col-md-6">
                <div class="card-body">
                  <h5 class="card-title snippet">Eikonal vs Dijkstra’s</h5>
                  <p class="ps-2 card-text">
                    The integration field can be calculated in many different ways. One of the computationally fastest ways to do this is with a version of Dijkstra’s algorithm to step through each
                    node going out from the goal position. The issue with this method is that its discrete, causing noticeable square or diamond shape artifacting. This caused agents to take odd paths
                    favoring the cardinal axis. After attempting this method I switched to calculating the integration field using the Eikonal equation, which is a partial differential equation used
                    to model wave propagation amongst other things. While more computationally expensive, the field provided is much smoother and more realistic, similar to if a wave in water
                    originates from the goal position and radiated outwards. There are several ways to perform these calculations, for instance, the Fast Marching Method. For my implementation, I used
                    the Fast Iterative Method.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>
    <%- include(buildRoot + '/Partials/footer.ejs', {relPth: "../../"}); -%>
  </body>
</html>
